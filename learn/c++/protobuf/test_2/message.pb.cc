// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
class UserInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserInfo> {
} _UserInfo_default_instance_;
class LogonRespMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogonRespMessage> {
} _LogonRespMessage_default_instance_;

namespace protobuf_message_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _UserInfo_default_instance_.Shutdown();
  _LogonRespMessage_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _UserInfo_default_instance_.DefaultConstruct();
  _LogonRespMessage_default_instance_.DefaultConstruct();
  _LogonRespMessage_default_instance_.get_mutable()->userinfo_ = const_cast< ::UserInfo*>(
      ::UserInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_message_2eproto

bool UserStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool LogResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kAcctIDFieldNumber;
const int UserInfo::kNameFieldNumber;
const int UserInfo::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&acctid_, &from.acctid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&acctid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:UserInfo)
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&acctid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&acctid_)) + sizeof(status_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserInfo& UserInfo::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:UserInfo)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&acctid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&acctid_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 acctID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_acctid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &acctid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .UserStatus status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UserStatus_IsValid(value)) {
            set_status(static_cast< ::UserStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 acctID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->acctid(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .UserStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:UserInfo)
}

size_t UserInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UserInfo)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_acctid()) {
    // required int64 acctID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->acctid());
  }

  if (has_status()) {
    // required .UserStatus status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int64 acctID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->acctid());

    // required .UserStatus status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserInfo*>(&from));
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      acctid_ = from.acctid_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  name_.Swap(&other->name_);
  std::swap(acctid_, other->acctid_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserInfo::GetTypeName() const {
  return "UserInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// required int64 acctID = 1;
bool UserInfo::has_acctid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserInfo::set_has_acctid() {
  _has_bits_[0] |= 0x00000002u;
}
void UserInfo::clear_has_acctid() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserInfo::clear_acctid() {
  acctid_ = GOOGLE_LONGLONG(0);
  clear_has_acctid();
}
::google::protobuf::int64 UserInfo::acctid() const {
  // @@protoc_insertion_point(field_get:UserInfo.acctID)
  return acctid_;
}
void UserInfo::set_acctid(::google::protobuf::int64 value) {
  set_has_acctid();
  acctid_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.acctID)
}

// required string name = 2;
bool UserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void UserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:UserInfo.name)
  return name_.GetNoArena();
}
void UserInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserInfo.name)
}
#if LANG_CXX11
void UserInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserInfo.name)
}
#endif
void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserInfo.name)
}
void UserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserInfo.name)
}
::std::string* UserInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:UserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:UserInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:UserInfo.name)
}

// required .UserStatus status = 3;
bool UserInfo::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserInfo::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void UserInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
::UserStatus UserInfo::status() const {
  // @@protoc_insertion_point(field_get:UserInfo.status)
  return static_cast< ::UserStatus >(status_);
}
void UserInfo::set_status(::UserStatus value) {
  assert(::UserStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogonRespMessage::kLogonResultFieldNumber;
const int LogonRespMessage::kUserInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogonRespMessage::LogonRespMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonRespMessage)
}
LogonRespMessage::LogonRespMessage(const LogonRespMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_userinfo()) {
    userinfo_ = new ::UserInfo(*from.userinfo_);
  } else {
    userinfo_ = NULL;
  }
  logonresult_ = from.logonresult_;
  // @@protoc_insertion_point(copy_constructor:LogonRespMessage)
}

void LogonRespMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&userinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logonresult_) -
      reinterpret_cast<char*>(&userinfo_)) + sizeof(logonresult_));
}

LogonRespMessage::~LogonRespMessage() {
  // @@protoc_insertion_point(destructor:LogonRespMessage)
  SharedDtor();
}

void LogonRespMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete userinfo_;
  }
}

void LogonRespMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogonRespMessage& LogonRespMessage::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogonRespMessage* LogonRespMessage::New(::google::protobuf::Arena* arena) const {
  LogonRespMessage* n = new LogonRespMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogonRespMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:LogonRespMessage)
  if (has_userinfo()) {
    GOOGLE_DCHECK(userinfo_ != NULL);
    userinfo_->::UserInfo::Clear();
  }
  logonresult_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogonRespMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:LogonRespMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LogResult logonResult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LogResult_IsValid(value)) {
            set_logonresult(static_cast< ::LogResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .UserInfo UserInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonRespMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonRespMessage)
  return false;
#undef DO_
}

void LogonRespMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonRespMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .LogResult logonResult = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->logonresult(), output);
  }

  // required .UserInfo UserInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->userinfo_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:LogonRespMessage)
}

size_t LogonRespMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LogonRespMessage)
  size_t total_size = 0;

  if (has_userinfo()) {
    // required .UserInfo UserInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->userinfo_);
  }

  if (has_logonresult()) {
    // required .LogResult logonResult = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->logonresult());
  }

  return total_size;
}
size_t LogonRespMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogonRespMessage)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .UserInfo UserInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->userinfo_);

    // required .LogResult logonResult = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->logonresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogonRespMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogonRespMessage*>(&from));
}

void LogonRespMessage::MergeFrom(const LogonRespMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogonRespMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      logonresult_ = from.logonresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogonRespMessage::CopyFrom(const LogonRespMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogonRespMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogonRespMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_userinfo()) {
    if (!this->userinfo_->IsInitialized()) return false;
  }
  return true;
}

void LogonRespMessage::Swap(LogonRespMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogonRespMessage::InternalSwap(LogonRespMessage* other) {
  std::swap(userinfo_, other->userinfo_);
  std::swap(logonresult_, other->logonresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LogonRespMessage::GetTypeName() const {
  return "LogonRespMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogonRespMessage

// required .LogResult logonResult = 1;
bool LogonRespMessage::has_logonresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogonRespMessage::set_has_logonresult() {
  _has_bits_[0] |= 0x00000002u;
}
void LogonRespMessage::clear_has_logonresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogonRespMessage::clear_logonresult() {
  logonresult_ = 0;
  clear_has_logonresult();
}
::LogResult LogonRespMessage::logonresult() const {
  // @@protoc_insertion_point(field_get:LogonRespMessage.logonResult)
  return static_cast< ::LogResult >(logonresult_);
}
void LogonRespMessage::set_logonresult(::LogResult value) {
  assert(::LogResult_IsValid(value));
  set_has_logonresult();
  logonresult_ = value;
  // @@protoc_insertion_point(field_set:LogonRespMessage.logonResult)
}

// required .UserInfo UserInfo = 2;
bool LogonRespMessage::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogonRespMessage::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void LogonRespMessage::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogonRespMessage::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
  clear_has_userinfo();
}
const ::UserInfo& LogonRespMessage::userinfo() const {
  // @@protoc_insertion_point(field_get:LogonRespMessage.UserInfo)
  return userinfo_ != NULL ? *userinfo_
                         : *::UserInfo::internal_default_instance();
}
::UserInfo* LogonRespMessage::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) {
    userinfo_ = new ::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:LogonRespMessage.UserInfo)
  return userinfo_;
}
::UserInfo* LogonRespMessage::release_userinfo() {
  // @@protoc_insertion_point(field_release:LogonRespMessage.UserInfo)
  clear_has_userinfo();
  ::UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
void LogonRespMessage::set_allocated_userinfo(::UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:LogonRespMessage.UserInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
